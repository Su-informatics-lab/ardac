__tablename__: node_case,
 __label__: case, 
id: <property object at 0x7f1bd30c9890>, 
state: <sqlalchemy.ext.hybrid.hybrid_property object at 0x7f1bd2859cd0>, 
submitter_id: <sqlalchemy.ext.hybrid.hybrid_property object at 0x7f1bd2859f10>, 
consent_type: <sqlalchemy.ext.hybrid.hybrid_property object at 0x7f1bd28594d0>, 
days_to_consent: <sqlalchemy.ext.hybrid.hybrid_property object at 0x7f1bd2859850>, 
index_date: <sqlalchemy.ext.hybrid.hybrid_property object at 0x7f1bd28599d0>, 
cohort: <sqlalchemy.ext.hybrid.hybrid_property object at 0x7f1bd2859390>, 
study_site: <sqlalchemy.ext.hybrid.hybrid_property object at 0x7f1bd2859dd0>, 
bari_surgery: <sqlalchemy.ext.hybrid.hybrid_property object at 0x7f1bd2859250>, 
ah_hosp: <sqlalchemy.ext.hybrid.hybrid_property object at 0x7f1bd2851f10>, 
ah_hosp_num: <sqlalchemy.ext.hybrid.hybrid_property object at 0x7f1bd2859150>, 
project_id: <sqlalchemy.ext.hybrid.hybrid_property object at 0x7f1bd2859b10>, 
created_datetime: <sqlalchemy.ext.hybrid.hybrid_property object at 0x7f1bd2859690>, 
updated_datetime: <sqlalchemy.ext.hybrid.hybrid_property object at 0x7f1bd285d090>, 
_dictionary: {'category': 'administrative', 'title': 'Case'}, 

_pg_links: {
'studies': {'edge_out': '_CaseMemberOfStudy_out', 
'dst_type': <class 'gdcdatamodel.models.Study'>}
}, 

_pg_backrefs: {
'audits': {'name': 'cases', 'src_type': <class 'gdcdatamodel.models.Audit'>}, 
'clinical_tests': {'name': 'cases', 'src_type': <class 'gdcdatamodel.models.ClinicalTest'>}, 
'demographics': {'name': 'cases', 'src_type': <class 'gdcdatamodel.models.Demographic'>}, 
'diagnoses': {'name': 'cases', 'src_type': <class 'gdcdatamodel.models.Diagnosis'>}, 
'family_histories': {'name': 'cases', 
'src_type': <class 'gdcdatamodel.models.FamilyHistory'>}, 
'follow_ups': {'name': 'cases', 'src_type': <class 'gdcdatamodel.models.FollowUp'>}, 
'samples': {'name': 'cases', 'src_type': <class 'gdcdatamodel.models.Sample'>}
}, 

_pg_edges: {
'studies': {'backref': 'cases', 'type': <class 'gdcdatamodel.models.Study'>}, 
'audits': {'backref': 'cases', 'type': <class 'gdcdatamodel.models.Audit'>}, 
'clinical_tests': {'backref': 'cases', 'type': <class 'gdcdatamodel.models.ClinicalTest'>}, 
'demographics': {'backref': 'cases', 'type': <class 'gdcdatamodel.models.Demographic'>}, 
'diagnoses': {'backref': 'cases', 'type': <class 'gdcdatamodel.models.Diagnosis'>}, 
'family_histories': {'backref': 'cases', 'type': <class 'gdcdatamodel.models.FamilyHistory'>}, 
'follow_ups': {'backref': 'cases', 'type': <class 'gdcdatamodel.models.FollowUp'>}, 
'samples': {'backref': 'cases', 'type': <class 'gdcdatamodel.models.Sample'>}
}, 

__module__: gdcdatamodel.models, 
__doc__: None, 
node_id: Case.node_id, 
created: Case.created, 
acl: Case.acl, 
_sysan: Case._sysan, 
_props: Case._props, 
label: case, 
_edges_out: ['_CaseMemberOfStudy_out'], 
_edges_in: ['_AuditDescribesCase_in', 
'_ClinicalTestPerformedForCase_in', 
'_DemographicDescribesCase_in', 
'_DiagnosisDescribesCase_in', 
'_FamilyHistoryDescribesCase_in', 
'_FollowUpDescribesCase_in', 
'_SampleDerivedFromCase_in'], 
__table__: node_case, 
_sa_class_manager: <ClassManager of <class 'gdcdatamodel.models.Case'> at 7f1bd30e0050>, 
__init__: <function __init__ at 0x7f1bd30dd830>, 
__mapper__: mapped class Case->node_case, 
_versions: <property object at 0x7f1bd30e0710>, 
get_versions: <function cls_inject_versioned_nodes_lookup.<locals>.get_versions at 0x7f1bd30ddb00>, 
__pg_secondary_keys: [['project_id', 
'submitter_id']], 
_secondary_keys: <sqlalchemy.ext.hybrid.hybrid_property object at 0x7f1bd30de1d0>, 
_secondary_keys_dicts: <property object at 0x7f1bd30e0a10>, 
type: Case.type, 
__pg_properties__: {'ah_hosp': (<class 'str'>,), 
'ah_hosp_num': (<class 'float'>, 
<class 'int'>), 
'bari_surgery': (<class 'str'>,), 
'cohort': (<class 'str'>,), 
'consent_type': (<class 'str'>,), 
'created_datetime': (<class 'str'>,), 
'days_to_consent': (<class 'float'>, 
<class 'int'>), 
'index_date': (<class 'str'>,), 
'project_id': (<class 'str'>,), 
'state': (<class 'str'>,), 
'study_site': (<class 'str'>,), 
'submitter_id': (<class 'str'>, 
<class 'str'>), 
'updated_datetime': (<class 'str'>,)}, 
_AuditDescribesCase_in: Case._AuditDescribesCase_in, 
audits: AssociationProxy('_AuditDescribesCase_in', 
'src'), 
_CaseMemberOfStudy_out: Case._CaseMemberOfStudy_out, 
studies: AssociationProxy('_CaseMemberOfStudy_out', 
'dst'), 
_ClinicalTestPerformedForCase_in: Case._ClinicalTestPerformedForCase_in, 
clinical_tests: AssociationProxy('_ClinicalTestPerformedForCase_in', 
'src'), 
_DemographicDescribesCase_in: Case._DemographicDescribesCase_in, 
demographics: AssociationProxy('_DemographicDescribesCase_in', 
'src'), 
_DiagnosisDescribesCase_in: Case._DiagnosisDescribesCase_in, 
diagnoses: AssociationProxy('_DiagnosisDescribesCase_in', 
'src'), 
_FamilyHistoryDescribesCase_in: Case._FamilyHistoryDescribesCase_in, 
family_histories: AssociationProxy('_FamilyHistoryDescribesCase_in', 
'src'), 
_FollowUpDescribesCase_in: Case._FollowUpDescribesCase_in, 
follow_ups: AssociationProxy('_FollowUpDescribesCase_in', 
'src'), 
_SampleDerivedFromCase_in: Case._SampleDerivedFromCase_in, 
samples: AssociationProxy('_SampleDerivedFromCase_in', 
'src'), 
_AssociationProxy__DemographicDescribesCase_in_139757470362128_inst: ObjectAssociationProxyInstance(AssociationProxy('_DemographicDescribesCase_in', 
'src'))